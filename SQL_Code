CREATE DATABASE ig_clone;

USE ig_clone;

/*Users*/
CREATE TABLE users(
	id INT AUTO_INCREMENT UNIQUE PRIMARY KEY,
	username VARCHAR(255) NOT NULL,
	created_at TIMESTAMP DEFAULT NOW()
);

/*Photos*/
CREATE TABLE photos(
	id INT AUTO_INCREMENT PRIMARY KEY,
	image_url VARCHAR(355) NOT NULL,
	user_id INT NOT NULL,
	created_dat TIMESTAMP DEFAULT NOW(),
	FOREIGN KEY(user_id) REFERENCES users(id)
);

/*Comments*/
CREATE TABLE comments(
	id INT AUTO_INCREMENT PRIMARY KEY,
	comment_text VARCHAR(255) NOT NULL,
	user_id INT NOT NULL,
	photo_id INT NOT NULL,
	created_at TIMESTAMP DEFAULT NOW(),
	FOREIGN KEY(user_id) REFERENCES users(id),
	FOREIGN KEY(photo_id) REFERENCES photos(id)
);

/*Likes*/
CREATE TABLE likes(
	user_id INT NOT NULL,
	photo_id INT NOT NULL,
	created_at TIMESTAMP DEFAULT NOW(),
	FOREIGN KEY(user_id) REFERENCES users(id),
	FOREIGN KEY(photo_id) REFERENCES photos(id),
	PRIMARY KEY(user_id,photo_id)
);

/*follows*/
CREATE TABLE follows(
	follower_id INT NOT NULL,
	followee_id INT NOT NULL,
	created_at TIMESTAMP DEFAULT NOW(),
	FOREIGN KEY (follower_id) REFERENCES users(id),
	FOREIGN KEY (followee_id) REFERENCES users(id),
	PRIMARY KEY(follower_id,followee_id)
);

/*Tags*/
CREATE TABLE tags(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	tag_name VARCHAR(255) UNIQUE NOT NULL,
	created_at TIMESTAMP DEFAULT NOW()
);

/*junction table: Photos - Tags*/
CREATE TABLE photo_tags(
	photo_id INT NOT NULL,
	tag_id INT NOT NULL,
	FOREIGN KEY(photo_id) REFERENCES photos(id),
	FOREIGN KEY(tag_id) REFERENCES tags(id),
	PRIMARY KEY(photo_id,tag_id)
);

INSERT INTO users (username) VALUES
('aastha_tyagi'),
('coder123'),
('photolover'),
('travel_buddy'),
('gamerboy');

INSERT INTO photos (image_url, user_id) VALUES
('https://example.com/photo1.jpg', 1),
('https://example.com/photo2.jpg', 1),
('https://example.com/photo3.jpg', 2),
('https://example.com/photo4.jpg', 3),
('https://example.com/photo5.jpg', 4);

INSERT INTO comments (comment_text, user_id, photo_id) VALUES
('Nice pic!', 2, 1),
('Amazing shot!', 3, 1),
('Where is this?', 4, 2),
('Love the vibe!', 5, 3),
('Looks cool!', 1, 4);

INSERT INTO likes (user_id, photo_id) VALUES
(2, 1),
(3, 1),
(4, 2),
(1, 3),
(5, 3),
(2, 4),
(1, 5);

INSERT INTO follows (follower_id, followee_id) VALUES
(1, 2),
(1, 3),
(2, 3),
(3, 1),
(4, 5),
(5, 1);

INSERT INTO tags (tag_name) VALUES
('nature'),
('sunset'),
('travel'),
('food'),
('gaming');

INSERT INTO photo_tags (photo_id, tag_id) VALUES
(1, 1),  -- photo1: nature
(1, 2),  -- photo1: sunset
(2, 3),  -- photo2: travel
(3, 4),  -- photo3: food
(5, 5);  -- photo5: gaming

-- 1. Find the most liked photo (with like count and owner username)
SELECT 
    photos.id,
    photos.image_url,
    users.username AS owner,
    COUNT(likes.photo_id) AS like_count
FROM photos
JOIN users ON photos.user_id = users.id
LEFT JOIN likes ON photos.id = likes.photo_id
GROUP BY photos.id
ORDER BY like_count DESC
LIMIT 1;


-- 2. List the user with the most followers
SELECT 
    u.username,
    COUNT(f.follower_id) AS follower_count
FROM users u
JOIN follows f ON u.id = f.followee_id
GROUP BY u.id
ORDER BY follower_count DESC
LIMIT 1;


-- 3. Get all comments made on Aastha's photos
SELECT 
    c.comment_text,
    commenter.username AS commenter,
    p.image_url
FROM comments c
JOIN photos p ON c.photo_id = p.id
JOIN users owner ON p.user_id = owner.id
JOIN users commenter ON c.user_id = commenter.id
WHERE owner.username = 'aastha_tyagi';


-- 4. Show all photos tagged as 'sunset'
SELECT 
    photos.id,
    photos.image_url,
    users.username AS uploader
FROM photos
JOIN photo_tags ON photos.id = photo_tags.photo_id
JOIN tags ON photo_tags.tag_id = tags.id
JOIN users ON photos.user_id = users.id
WHERE tags.tag_name = 'sunset';


-- 5. List all followers of 'aastha_tyagi'
SELECT 
    follower.username AS follower_name
FROM follows
JOIN users AS followee ON follows.followee_id = followee.id
JOIN users AS follower ON follows.follower_id = follower.id
WHERE followee.username = 'aastha_tyagi';


-- 6. Show all photos along with their associated tags
SELECT 
    photos.image_url,
    GROUP_CONCAT(tags.tag_name SEPARATOR ', ') AS tags
FROM photos
JOIN photo_tags ON photos.id = photo_tags.photo_id
JOIN tags ON photo_tags.tag_id = tags.id
GROUP BY photos.id;


-- 7. Show total number of comments made by each user
SELECT 
    users.username,
    COUNT(comments.id) AS total_comments
FROM users
LEFT JOIN comments ON users.id = comments.user_id
GROUP BY users.id
ORDER BY total_comments DESC;
